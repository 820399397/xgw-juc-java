1.能不能谈谈你对线程安全的理解？
线程安全是指某个函数在并发环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。
简单来说，就是多个线程同时访问共享变量的时候，得到的结果和我们预期的一样，就是线程安全。所以有四个关键词：并发、多线程、共享变量、正确完成。这里所谓的正确完成，其实就是要满足所谓的原子性、有序性和可见性。

2.共享变量
所谓共享变量，指的是多个线程都可以操作的变量。
前面我们提到过，进程是分配资源的基本单位，线程是执行的基本单位。所以，多个线程之间是可以共享一部分进程中的数据的。
在JVM中，Java堆和方法区的区域是多个线程共享的数据区域。也就是说，多个线程可以操作保存在堆或者方法区中的同一个数据。那么，换句话说，保存在堆和方法区中的变量就是Java中的共享变量。

3.那么，Java中哪些变量是存放在堆中，哪些变量是存放在方法区中，又有哪些变量是存放在栈中的呢？
Java中共有三种变量，分别是类变量、实例变量和局部变量。他们分别存放在JVM的方法区、堆内存和栈内存中。
类变量：类变量是使用static关键字修饰的变量。类变量在内存中只有一个副本，被所有实例共享。类变量存储在方法区中。
实例变量：实例变量是使用非static关键字修饰的变量。实例变量存储在堆内存中，每个实例都有自己的一份实例变量副本。
局部变量：局部变量是在方法、构造方法或者语句块中定义的变量。局部变量存储在栈内存中，生命周期随着方法的调用结束而结束。
如果没有写操作，或者对象没有被复用，那么也不会存在线程安全问题。
对象没有被复用，意味着在不同线程中使用的对象实例是独立的，没有共享同一个实例。
