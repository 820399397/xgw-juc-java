1.什么是多线程中的上下文切换？
上下文切换是指 CPU 从一个线程转到另一个线程时，需要保存当前线程的上下文状态，恢复另一个线程的上下文状态，以便于下一次执行该线程时能够正确地运行。
在多线程编程中，上下文切换是一种常见的操作，上下文切换通常是指在一个 CPU 上，由于多个线程共享 CPU 时间片，当一个线程的时间片用完后，需要切换到另一个线程运行。
此时需要保存当前线程的状态信息，包括程序计数器、寄存器、栈指针等，以便下次继续执行该线程时能够恢复到正确的执行状态。同时，需要将此次要切换到的线程状态信息恢复，以便于该线程能够正确运行。
在多线程中，上下文切换的开销比直接用单线程大，因为在多线程中，需要保存和恢复更多的上下文信息。过多的上下文切换会降低系统的运行效率，因此需要尽可能减少上下文切换的次数。

扩展知识：减少上下文切换
频繁的上下文切换会导致CPU时间的浪费，因此在多线程编程时需要尽可能地避免它。以下是一些避免频繁上下文切换的方法：
- 减少线程数：可以通过合理的线程池管理来减少线程的创建和销毁，线程数不是越多越好，合理的线程数可以避免线程过多导致上下文切换。
- 使用无锁并发编程：无锁并发编程可以避免线程因等待锁而进入阻塞状态，从而减少上下文切换的发生。
- 使用CAS算法：CAS算法可以避免线程的阻塞和唤醒操作，从而减少上下文切换。
- 使用协程（JDK 19的虚拟线程）：协程是一种用户态线程，其切换不需要操作系统的参与，因此可以避免上下文切换。（避免的是操作系统级别的上下文切换，但是仍然需要在JVM层面做一些保存和恢复线程的状态，但是成本低得多）
- 合理地使用锁：在使用锁的过程中，需要避免过多地使用同步块或同步方法，尽量缩小同步块或同步方法的范围，从而减少线程的等待时间，避免上下文切换的发生。

2.创建线程有几种方式？
在Java中，共有四种方式可以创建线程，分别是
- 继承Thread类创建线程
- 实现Runnable接口创建线程
- 通过Callable和FutureTask创建线程
- 通过线程池创建线程
其实，归根结底最终就两种，一个是继承Thread类，一个是实现Runnable接口，至于其他的。也是基于这两个方式实现的。但是有的时候面试官更关注的是实际写代码过程中，有几种方式可以实现。所以一般回答4种也没啥毛病。

扩展知识：Runnable和Callable区别
Runnable接口和Callable接口都可以用来创建新线程，实现Runnable的时候，需要实现run方法；实现Callable接口的话，需要实现call方法。
Runnable的run方法无返回值，Callable的call方法有返回值，类型为Object。
Callable中可以够抛出checked exception,而Runnable不可以。
Callable和Runnable都可以应用于executors。而Thread类只支持Runnable。

扩展知识：Future
Future是一个接口，代表了一个异步执行的结果。接口中的方法用来检查执行是否完成、等待完成和得到执行的结果。
当执行完成后，只能通过get()方法得到结果，get方法会阻塞直到结果准备好了。如果想取消，那么调用cancel()方法。
FutureTask是Future接口的一个实现，它实现了一个可以提交给Executor执行的任务，并且可以用来检查任务的执行状态和获取任务的执行结果。

