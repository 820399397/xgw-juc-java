1.什么是多线程中的上下文切换？
上下文切换是指 CPU 从一个线程转到另一个线程时，需要保存当前线程的上下文状态，恢复另一个线程的上下文状态，以便于下一次执行该线程时能够正确地运行。
在多线程编程中，上下文切换是一种常见的操作，上下文切换通常是指在一个 CPU 上，由于多个线程共享 CPU 时间片，当一个线程的时间片用完后，需要切换到另一个线程运行。
此时需要保存当前线程的状态信息，包括程序计数器、寄存器、栈指针等，以便下次继续执行该线程时能够恢复到正确的执行状态。同时，需要将此次要切换到的线程状态信息恢复，以便于该线程能够正确运行。
在多线程中，上下文切换的开销比直接用单线程大，因为在多线程中，需要保存和恢复更多的上下文信息。过多的上下文切换会降低系统的运行效率，因此需要尽可能减少上下文切换的次数。

扩展知识：减少上下文切换
频繁的上下文切换会导致CPU时间的浪费，因此在多线程编程时需要尽可能地避免它。以下是一些避免频繁上下文切换的方法：
- 减少线程数：可以通过合理的线程池管理来减少线程的创建和销毁，线程数不是越多越好，合理的线程数可以避免线程过多导致上下文切换。
- 使用无锁并发编程：无锁并发编程可以避免线程因等待锁而进入阻塞状态，从而减少上下文切换的发生。
- 使用CAS算法：CAS算法可以避免线程的阻塞和唤醒操作，从而减少上下文切换。
- 使用协程（JDK 19的虚拟线程）：协程是一种用户态线程，其切换不需要操作系统的参与，因此可以避免上下文切换。（避免的是操作系统级别的上下文切换，但是仍然需要在JVM层面做一些保存和恢复线程的状态，但是成本低得多）
- 合理地使用锁：在使用锁的过程中，需要避免过多地使用同步块或同步方法，尽量缩小同步块或同步方法的范围，从而减少线程的等待时间，避免上下文切换的发生。

2.创建线程有几种方式？
在Java中，共有四种方式可以创建线程，分别是
- 继承Thread类创建线程
- 实现Runnable接口创建线程
- 通过Callable和FutureTask创建线程
- 通过线程池创建线程
其实，归根结底最终就两种，一个是继承Thread类，一个是实现Runnable接口，至于其他的。也是基于这两个方式实现的。但是有的时候面试官更关注的是实际写代码过程中，有几种方式可以实现。所以一般回答4种也没啥毛病。

扩展知识：Runnable和Callable区别
Runnable接口和Callable接口都可以用来创建新线程，实现Runnable的时候，需要实现run方法；实现Callable接口的话，需要实现call方法。
Runnable的run方法无返回值，Callable的call方法有返回值，类型为Object。
Callable中可以够抛出checked exception,而Runnable不可以。
Callable和Runnable都可以应用于executors。而Thread类只支持Runnable。

扩展知识：Future
Future是一个接口，代表了一个异步执行的结果。接口中的方法用来检查执行是否完成、等待完成和得到执行的结果。
当执行完成后，只能通过get()方法得到结果，get方法会阻塞直到结果准备好了。如果想取消，那么调用cancel()方法。
FutureTask是Future接口的一个实现，它实现了一个可以提交给Executor执行的任务，并且可以用来检查任务的执行状态和获取任务的执行结果。

3.什么是守护线程，和普通线程有什么区别？
在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) 。用户线程一般用于执行用户级任务，而守护线程也就是“后台线程”，一般用来执行后台任务，守护线程最典型的应用就是GC(垃圾回收器)。
这两种线程其实是没有什么区别的，唯一的区别就是Java虚拟机在所有<用户线程>都结束后就会退出，而不会等<守护线程>执行完。

扩展知识：创建守护线程
我们可以通过使用setDaemon()方法通过传递true作为参数，使线程成为一个守护线程。我们必须在启动线程之前调用一个线程的setDaemon()方法。否则，就会抛出一个java.lang.IllegalThreadStateException。
可以使用isDaemon()方法来检查线程是否是守护线程。
在 Java 中，如果一个守护线程（daemon thread）创建了一个新的线程，那么这个新线程也是一个守护线程。这是 Java 线程模型的默认行为。

4.线程有几种状态，状态之间的流转是怎样的？
Java中线程的状态分为6种：
1.初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。
2.运行(RUNNABLE)：Java线程中将就绪（READY）和运行中（RUNNING）两种状态笼统的称为“运行”。
就绪（READY）:线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中并分配cpu使用权 。
运行中（RUNNING）：就绪(READY)的线程获得了cpu 时间片，开始执行程序代码。
3.阻塞(BLOCKED)：表示线程阻塞于锁（关于锁，在后面章节会介绍）。
4.等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。
5.超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。
6. 终止(TERMINATED)：表示该线程已经执行完毕。

流转状态图：
   NEW
    |
    |  start()
    v
RUNNABLE <--> BLOCKED
    |         |
    |         |
    v         v
WAITING     TIMED_WAITING
    |         |
    +----> RUNNABLE
    |
    v
TERMINATED

NEW -> RUNNABLE：线程调用 start() 方法后，从 NEW 状态变为 RUNNABLE 状态。此时，线程可以运行。
RUNNABLE -> BLOCKED：线程试图进入一个同步块或方法，但该同步块或方法的锁被其他线程持有，线程会变为 BLOCKED 状态。
BLOCKED -> RUNNABLE：线程成功获得锁后，从 BLOCKED 状态变为 RUNNABLE 状态。
RUNNABLE -> WAITING：线程调用 Object.wait()、Thread.join() 或 LockSupport.park() 方法后，进入 WAITING 状态，等待被其他线程唤醒。
RUNNABLE -> TIMED_WAITING：线程调用 Thread.sleep(long millis)、Object.wait(long timeout)、Thread.join(long millis) 或 LockSupport.parkNanos(long nanos) 方法后，进入 TIMED_WAITING 状态，等待指定的时间。
WAITING -> RUNNABLE：线程在 WAITING 状态中，被其他线程调用 Object.notify()、Object.notifyAll() 或 Thread.interrupt() 后，重新进入 RUNNABLE 状态。
TIMED_WAITING -> RUNNABLE：线程在 TIMED_WAITING 状态中，时间到期或被 Thread.interrupt() 后，重新进入 RUNNABLE 状态。
RUNNABLE -> TERMINATED：线程执行完 run() 方法或抛出异常，线程进入 TERMINATED 状态。



扩展知识：WAITING和TIMED_WAIT的区别？
WAITING是等待状态，在Java中，调用wait方法时，线程会进入到WAITING状态，而TIMED_WAITING是超时等待状态，当线程执行sleep方法时，线程会进入TIMED_WAIT状态。
处于WAITING和TIMED_WAIT的线程，都是会让出CPU的，这时候其他线程就可以获得CPU时间片开始执行。
但是他们在对象的锁释放上面并不一样，如果加了锁，sleep方法不会释放对象上的锁，而wait方法是会释放锁的。
因为Java锁的目标是对象，所以wait、notify和notifyAll针对的目标都是对象，所以把他们定义在Object类中。而sleep不需要释放锁，所以他是Thread类中的一个方法。


扩展知识：为什么线程没有RUNNING状态
对于现在的分时操作系统来说，在单CPU情况下，所有的线程其实都是串行执行的。但是为了让我们看起来像是在并发执行，人们把CPU的执行分成很多个小的时间片。
哪个线程得到时间片，那个线程就执行，时间片到了之后，就要释放出CPU，再重新进行争抢时间片。
只要把时间片划分的足够细，那么多个程序虽然在不断的串行执行，但是看起来也像是在同时执行一样。微观串行，宏观并行
那么，CPU的时间片其实是很短的，一般也就是10-20毫秒左右。
那么，也就是说，在一秒钟之内，同一个线程可能一部分时间处于READY状态、一部分时间处于RUNNING状态。
那么如果，明确的给线程定义出RUNNING状态的话，有一个很大的问题，就是这个状态其实是不准的。
因为当我们看到线程是RUNNING状态的时候，很有可能他已经丢失了CPU时间片了。
对于线程的状态，我们只需要知道，他当前有没有在"正在参与执行"就行了，何为"参与执行"？
就是他的状态是可执行的，只要获得时间片，就能立即执行。
那这不就是RUNNABLE吗？
所以，Java就没有给线程定义RUNNING状态，而是定义了一个RUNNABLE状态。



