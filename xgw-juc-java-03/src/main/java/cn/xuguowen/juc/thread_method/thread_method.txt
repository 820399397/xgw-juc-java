线程的常用方法
1.start()：启动一个新线程，在新的线程运行 run 方法中的代码。start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的
           start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException。
2.sleep()：让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程。是一个静态方法。
3.yield()：提示线程调度器让出当前线程对CPU的使用。是一个静态方法。
4.getPriority()：获取线程优先级。
5.setPriority(int)：修改线程优先级。java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率。
6.join()：等待线程运行结束。
7.join(long n)：等待线程运行结束,最多等待 n 毫秒。如果在这期间，被等待的线程运行完毕，则直接结束等待。被等待的线程没有执行完毕，等待线程也不等待了，继续向下运行。
8.interrupt()：打断线程。如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除打断标记（将打断标记的boolean值置为false） ；
                       如果打断的正在运行的线程，则会设置打断标记（将打断标记的boolean值置为true） ；park 的线程被打断，也会设置打断标记（将打断标记的boolean值置为true）。
9.isInterrupted()：测试线程是否被打断。不会清除打断标记，即如果被打断，以后每次调用该方法都会返回true。
10.interrupted()：静态方法，测试当前线程是否被打断。会清除打断标记，即如果被打断，以后每次调用该方法都会返回false。
11.park()：用于挂起当前线程，该线程会进入阻塞状态，直到它被其他线程显式地唤醒。
下面的方法是不推荐的，已经过时的方法,容易破坏同步代码块，造成线程死锁
12.stop()：强制线程生命周期结束，不推荐使用。
13.suspend()：挂起线程，不推荐使用。
14.resume()：恢复线程的执行，不推荐使用。